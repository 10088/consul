${
	[1].map(i => {
    const namespaceRules = env(
      'CONSUL_NAMESPACE_RULE_COUNT',
      Math.floor((Math.random() * 10) + 1)
    );
    const claimMappings = env(
      'CONSUL_CLAIM_MAPPING_COUNT',
      Math.floor((Math.random() * 10) + 1)
    );
    const listClaimMappings = env(
      'CONSUL_LIST_CLAIM_MAPPING_COUNT',
      Math.floor((Math.random() * 10) + 1)
    );

    const type = `${fake.helpers.randomize(['kubernetes', 'jwt', 'oidc'])}`;

    const cert = `-----BEGIN CERTIFICATE-----
MIICnDCCAkOgAwIBAgIRAOnKNzSoGq53Rq/G5tbm85swCgYIKoZIzj0EAwIwgbkx
CzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNj
bzEaMBgGA1UECRMRMTAxIFNlY29uZCBTdHJlZXQxDjAMBgNVBBETBTk0MTA1MRcw
FQYDVQQKEw5IYXNoaUNvcnAgSW5jLjFAMD4GA1UEAxM3Q29uc3VsIEFnZW50IENB
IDE4NTU3MTQ5MTMzMTA0NzczNDYwMjQyMDcxODI5NjUzMzQzNTQ0MzAeFw0yMDEw
MjgyMjI3NTZaFw0yMTEwMjgyMjI3NTZaMBwxGjAYBgNVBAMTEWNsaWVudC5kYzEu
Y29uc3VsMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEMtVdDd8tDZBaOaDFFzWD
0hTxO7soxUuz1dWaO8FGhIS07dfSBjYumEOgfNtfOzAILvkBd4gS8DrQZ2Rbks86
iKOBxzCBxDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsG
AQUFBwMBMAwGA1UdEwEB/wQCMAAwKQYDVR0OBCIEIEJWUjlDw7H2fbRpGG8fpqCq
GEX80iDpQqXOU0wg6fEPMCsGA1UdIwQkMCKAIAu+td60D/Er7Xjtyg0B6XflfKYm
IdXjPfiFy8SGeKS2MC0GA1UdEQQmMCSCEWNsaWVudC5kYzEuY29uc3Vsgglsb2Nh
bGhvc3SHBH8AAAEwCgYIKoZIzj0EAwIDRwAwRAIgYAZTf8VcZ4nQl4lbm579BfXy
6YpYz/DdfkEODUBxUyYCIDXhfmxtL/gTSkIh1E+fV7H7ZmqPKgTDH1XBV2zYnj/C
-----END CERTIFICATE-----`;

    let sourceType;

    if (type !== 'kubernetes') {
      sourceType = `${fake.helpers.randomize(['JWTValidationPubKeys', 'JWKSURL', 'OIDCDiscoveryURL'])}`;
    }

    let config = {};
    switch(type) {
      case 'kubernetes':
        config = {
          Host: `https://${fake.internet.ip()}:8443`,
          CACert: cert,
          ServiceAccountJWT: `eyJhbGciOiJ${fake.internet.password(25)}.eyJ${fake.internet.password(61)}.${fake.internet.password(32)}`
        };
        break;
      case 'oidc':
        config = {
          OIDCDiscoveryURL: `https://${fake.internet.ip()}:8443`,
          OIDCDiscoveryCACert: cert,
          OIDCClientID: `${fake.hacker.noun()}-ID`,
          OIDCClientSecret: `${fake.hacker.noun()}-secret`,
          BoundAudiences: ["aud_example_0", "aud_example_1"],
          OIDCScopes: ["scope_01", "scope_02", "scope_03"],
          JWTSupportedAlgs: ["RS256", "RS257"],
          VerboseOIDCLogging: fake.random.boolean(),
          AllowedRedirectURIs: ["http://example.com/example-1", "http://example.com/example-2", "http://example.com/example-3"],
        };
        if(claimMappings > 0) {
          config = {
            ...config,
            ClaimMappings: range(claimMappings).reduce((prev, item) => ({
              ...prev,
              [`http://${fake.internet.domainName()}/${fake.system.fileName()}`]: `${fake.hacker.noun()}`,
            }), {}),
          };
        }
        if(listClaimMappings > 0) {
          config = {
            ...config,
            ListClaimMappings: range(listClaimMappings).reduce((prev, item) => ({
              ...prev,
              [`http://${fake.internet.domainName()}/${fake.system.fileName()}`]: `${fake.hacker.noun()}`,
            }), {}),
          };
        }
        break;
      case 'jwt':
        config = {
          JWTSupportedAlgs: ["RS256", "RS257"],
          BoundAudiences: ["aud_example_0", "aud_example_1"],
          BoundIssuer: `${fake.hacker.noun()}-issuer`,
          ExpirationLeeway: `${fake.random.number({min: 0, max: 60})}`,
          NotBeforeLeeway: `${fake.random.number({min: 0, max: 60})}`,
          ClockSkewLeeway: `${fake.random.number({min: 0, max: 60})}`,
        };
        if(claimMappings > 0) {
          config = {
            ...config,
            ClaimMappings: range(claimMappings).reduce((prev, item) => ({
              ...prev,
              [`http://${fake.internet.domainName()}/${fake.system.fileName()}`]: `${fake.hacker.noun()}`,
            }), {}),
          };
        }
        if(listClaimMappings > 0) {
          config = {
            ...config,
            ListClaimMappings: range(listClaimMappings).reduce((prev, item) => ({
              ...prev,
              [`http://${fake.internet.domainName()}/${fake.system.fileName()}`]: `${fake.hacker.noun()}`,
            }), {}),
          };
        }
        break;
    }

    switch(sourceType) {
      case 'JWTValidationPubKeys':
        config.JWTValidationPubKeys = cert;
        break;
      case 'JWKSURL':
        config.JWKSURL = `https://${fake.internet.ip()}:8443`;
        config.JWKSCACert = cert;
        break;
      case 'OIDCDiscoveryURL':
        config.OIDCDiscoveryURL = `https://${fake.internet.ip()}:8443`;
        break;
    }

    return `{
      "Name": "${location.pathname.get(3)}",
      "Namespace": "${
        typeof location.search.ns !== 'undefined' ? location.search.ns :
          typeof http.body.Namespace !== 'undefined' ? http.body.Namespace : 'default'
      }",
      "Type": "${type}",
      "Description": "${fake.lorem.sentence()}",
      "DisplayName": "${fake.hacker.noun()}",
      "MaxTokenTTL": "${fake.random.number({min: 0, max: 60})}m${fake.random.number({min: 0, max: 60})}s",
      "TokenLocality": "${fake.helpers.randomize(['local', 'global', ''])}",
${namespaceRules > 0 ? `
      "NamespaceRules": [
${range(namespaceRules).map(item => `
      {
          "Selector": "${fake.helpers.randomize(['serviceaccount.namespace==', 'serviceaccount.namespace!='])}${fake.hacker.noun()}",
          "BindNamespace": "${fake.hacker.noun()}-nspace"
      }
`)}
      ],
` : ``}
      "Config": ${JSON.stringify(config)},
      "CreateIndex": ${fake.random.number()},
      "ModifyIndex": 10
    }`
  })
}
